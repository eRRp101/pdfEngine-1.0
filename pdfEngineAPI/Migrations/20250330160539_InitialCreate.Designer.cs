// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pdfEngineAPI.Data;

#nullable disable

namespace pdfEngineAPI.Migrations
{
    [DbContext(typeof(PdfDbContext))]
    [Migration("20250330160539_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ModelLibrary.Model.DocumentChunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChunkText")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentChunks");
                });

            modelBuilder.Entity("ModelLibrary.Model.Embedding", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChunkId")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Vector")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChunkId");

                    b.ToTable("Embeddings");
                });

            modelBuilder.Entity("ModelLibrary.Model.FileContent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileContent");
                });

            modelBuilder.Entity("ModelLibrary.Model.FileMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileGuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileMetaData");
                });

            modelBuilder.Entity("ModelLibrary.Model.DocumentChunk", b =>
                {
                    b.HasOne("ModelLibrary.Model.FileMetaData", "Document")
                        .WithMany("DocumentChunks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ModelLibrary.Model.Embedding", b =>
                {
                    b.HasOne("ModelLibrary.Model.DocumentChunk", "Chunk")
                        .WithMany("Embeddings")
                        .HasForeignKey("ChunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chunk");
                });

            modelBuilder.Entity("ModelLibrary.Model.FileContent", b =>
                {
                    b.HasOne("ModelLibrary.Model.FileMetaData", null)
                        .WithOne("FileContent")
                        .HasForeignKey("ModelLibrary.Model.FileContent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.Model.DocumentChunk", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("ModelLibrary.Model.FileMetaData", b =>
                {
                    b.Navigation("DocumentChunks");

                    b.Navigation("FileContent")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
